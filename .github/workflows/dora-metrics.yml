name: DORA Metrics Tracking

on:
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      period:
        description: 'Period to analyze (days)'
        default: '7'
        required: false
  pull_request:
    types: [closed]
  push:
    branches: [main, master]
  deployment_status:
    types: [success, failure]

jobs:
  calculate-dora-metrics:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      actions: read
      deployments: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Calculate DORA Metrics
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ZENHUB_API_KEY: ${{ secrets.ZENHUB_API_KEY }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Load our metrics calculation script
            const scriptPath = '.github/scripts/track-metrics.js';
            if (!fs.existsSync(scriptPath)) {
              console.log('Metrics script not found, skipping...');
              return;
            }
            
            const { calculateDORAMetrics, postMetricsComment } = require(path.resolve(scriptPath));
            
            const period = context.eventName === 'workflow_dispatch' 
              ? parseInt(github.event.inputs?.period || '7') 
              : 7;
            
            try {
              const metrics = await calculateDORAMetrics(github, context, period);
              await postMetricsComment(github, context, metrics);
              
              console.log('DORA Metrics calculated and posted successfully');
              console.log(JSON.stringify(metrics, null, 2));
            } catch (error) {
              console.error('Error calculating DORA metrics:', error);
              throw error;
            }

  track-deployment:
    if: github.event_name == 'deployment_status'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Track Deployment Event
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const scriptPath = '.github/scripts/track-metrics.js';
            
            if (fs.existsSync(scriptPath)) {
              const { trackDeployment } = require(scriptPath);
              await trackDeployment(github, context, {
                status: context.payload.deployment_status.state,
                deployment_id: context.payload.deployment.id,
                environment: context.payload.deployment.environment,
                created_at: context.payload.deployment.created_at,
                updated_at: context.payload.deployment_status.created_at
              });
            }

  track-pr-merge:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Track PR Merge for Lead Time
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const scriptPath = '.github/scripts/track-metrics.js';
            
            if (fs.existsSync(scriptPath)) {
              const { trackPRMerge } = require(scriptPath);
              await trackPRMerge(github, context, {
                pr_number: context.payload.pull_request.number,
                created_at: context.payload.pull_request.created_at,
                merged_at: context.payload.pull_request.merged_at,
                first_commit_date: context.payload.pull_request.head.sha
              });
            }